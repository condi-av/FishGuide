// Calculator page functionality
class CalculatorPage {
    constructor() {
        this.formData = {};
        this.budget = 10000;
        this.init();
    }

    init() {
        this.initMobileMenu();
        this.initBudgetSlider();
        this.initForm();
        this.initAnimations();
    }

    // Mobile menu functionality
    initMobileMenu() {
        const mobileMenuBtn = document.getElementById('mobile-menu-btn');
        const mobileMenu = document.getElementById('mobile-menu');

        if (mobileMenuBtn && mobileMenu) {
            mobileMenuBtn.addEventListener('click', () => {
                mobileMenu.classList.toggle('hidden');
            });
        }
    }

    // Initialize budget slider
    initBudgetSlider() {
        const slider = document.getElementById('budget-slider');
        const valueDisplay = document.getElementById('budget-value');

        if (slider && valueDisplay) {
            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            valueDisplay.textContent = `${this.budget.toLocaleString()} ‚ÇΩ`;
            
            slider.addEventListener('input', (e) => {
                this.budget = parseInt(e.target.value);
                valueDisplay.textContent = `${this.budget.toLocaleString()} ‚ÇΩ`;
                
                // Update slider color based on value
                const percentage = (this.budget - 1000) / (50000 - 1000) * 100;
                slider.style.background = `linear-gradient(to right, #1e3a8a 0%, #1e3a8a ${percentage}%, #e2e8f0 ${percentage}%, #e2e8f0 100%)`;
            });

            // Initialize slider appearance
            const percentage = (this.budget - 1000) / (50000 - 1000) * 100;
            slider.style.background = `linear-gradient(to right, #1e3a8a 0%, #1e3a8a ${percentage}%, #e2e8f0 ${percentage}%, #e2e8f0 100%)`;
        }
    }

    // Initialize form submission
    initForm() {
        const form = document.getElementById('calculator-form');
        if (form) {
            // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∫–ª–∞—Å—Å–∞
            form.addEventListener('submit', this.processForm.bind(this));
        }
    }

    // --- [–ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò] ---
    
    // Core logic for calculating gear recommendations (Critical Fix)
    calculateRecommendations() {
        const { fish, season, budget } = this.formData;
        let recommendations = [];
        let rod = '', reel = '', lure = '';

        // Logic based on fish type (the most important factor)
        if (fish === 'pike') {
            rod = '–°–ø–∏–Ω–Ω–∏–Ω–≥–æ–≤–æ–µ —É–¥–∏–ª–∏—â–µ (2.4-2.7–º, —Ç–µ—Å—Ç 10-40–≥)';
            reel = '–ë–µ–∑—ã–Ω–µ—Ä—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ç—É—à–∫–∞, —Ä–∞–∑–º–µ—Ä 3000-4000';
            lure = '–í–æ–±–ª–µ—Ä—ã (–º–∏–Ω–Ω–æ—É), –∫—Ä—É–ø–Ω—ã–µ –∫–æ–ª–µ–±–ª—é—â–∏–µ—Å—è –±–ª–µ—Å–Ω—ã';
        } else if (fish === 'carp') {
            rod = '–ö–∞—Ä–ø–æ–≤–æ–µ —É–¥–∏–ª–∏—â–µ (3.6-3.9–º, —Ç–µ—Å—Ç –¥–æ 130–≥)';
            reel = '–ö–∞—Ç—É—à–∫–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –±–∞–π—Ç—Ä–∞–Ω–µ—Ä, —Ä–∞–∑–º–µ—Ä 5000+';
            lure = '–ë–æ–π–ª—ã (—Ñ—Ä—É–∫—Ç–æ–≤—ã–µ/—Ä—ã–±–Ω—ã–µ), –ø–µ–ª–ª–µ—Ç—Å, –∫—É–∫—É—Ä—É–∑–∞';
        } else if (fish === 'perch') {
             rod = '–£–ª—å—Ç—Ä–∞–ª–∞–π—Ç —Å–ø–∏–Ω–Ω–∏–Ω–≥ (1.8-2.1–º, —Ç–µ—Å—Ç 1-7–≥)';
            reel = '–ë–µ–∑—ã–Ω–µ—Ä—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ç—É—à–∫–∞, —Ä–∞–∑–º–µ—Ä 1000-2000';
            lure = '–ú–µ–ª–∫–∏–µ –≤—Ä–∞—â–∞—é—â–∏–µ—Å—è –±–ª–µ—Å–Ω—ã, –º–∏–∫—Ä–æ–¥–∂–∏–≥';
        } else {
            // Default for Bream/Roach/General peaceful fish
            rod = '–§–∏–¥–µ—Ä–Ω–æ–µ —É–¥–∏–ª–∏—â–µ (3.6–º, —Ç–µ—Å—Ç –¥–æ 80–≥)';
            reel = '–ë–µ–∑—ã–Ω–µ—Ä—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ç—É—à–∫–∞, —Ä–∞–∑–º–µ—Ä 2500';
            lure = '–ú–æ—Ç—ã–ª—å, –æ–ø–∞—Ä—ã—à, —á–µ—Ä–≤—å';
        }

        // Budget adjustment logic
        if (budget < 10000) {
            rod += ' (–±—é–¥–∂–µ—Ç–Ω–∞—è —Å–µ—Ä–∏—è - —Å—Ç–µ–∫–ª–æ–ø–ª–∞—Å—Ç–∏–∫/–∫–æ–º–ø–æ–∑–∏—Ç)';
        } else if (budget > 30000) {
            rod += ' (–ø—Ä–µ–º–∏—É–º —Å–µ—Ä–∏—è - –≤—ã—Å–æ–∫–æ–º–æ–¥—É–ª—å–Ω—ã–π –∫–∞—Ä–±–æ–Ω)';
        }

        // Season adjustment (simple example)
        if (season === 'winter') {
            rod = '–ó–∏–º–Ω—è—è —É–¥–æ—á–∫–∞ –∏–ª–∏ –∂–µ—Ä–ª–∏—Ü–∞';
            lure = '–ë–∞–ª–∞–Ω—Å–∏—Ä—ã, –º–æ—Ä–º—ã—à–∫–∏, –±–ª–µ—Å–Ω—ã –¥–ª—è –æ—Ç–≤–µ—Å–Ω–æ–≥–æ –±–ª–µ—Å–Ω–µ–Ω–∏—è';
            reel = '–ò–Ω–µ—Ä—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ç—É—à–∫–∞ –¥–ª—è –∑–∏–º–Ω–µ–π –ª–æ–≤–ª–∏';
        }


        recommendations.push(
            { type: '–£–¥–∏–ª–∏—â–µ', recommendation: rod },
            { type: '–ö–∞—Ç—É—à–∫–∞', recommendation: reel },
            { type: '–ü—Ä–∏–º–∞–Ω–∫–∞/–ù–∞—Å–∞–¥–∫–∞', recommendation: lure }
        );

        return recommendations;
    }

    // Process form submission (Critical Fix)
    processForm(e) {
        e.preventDefault();
        
        // 1. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        this.formData = {};
        const form = document.getElementById('calculator-form');
        new FormData(form).forEach((value, key) => {
            this.formData[key] = value;
        });
        
        // Validation
        if (!this.formData.fish || !this.formData.season) {
            this.renderResults([]);
            this.showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã —Ç–∏–ø —Ä—ã–±—ã –∏ —Å–µ–∑–æ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.');
            return;
        }

        // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        const results = this.calculateRecommendations();

        // 3. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        this.renderResults(results); 
        this.showError(null); // Clear previous errors
    }

    // --- [–ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò] ---
    
    // Renders the results section
    renderResults(results) {
        const resultsContainer = document.getElementById('recommendation-results');
        if (!resultsContainer) return;

        if (results.length === 0) {
            resultsContainer.innerHTML = '';
            return;
        }

        let html = results.map(item => `
            <div class="p-4 bg-white rounded-lg shadow-md border-l-4 border-lake-blue">
                <p class="font-display font-semibold text-lg text-slate-800">${item.type}</p>
                <p class="text-slate-600">${item.recommendation}</p>
            </div>
        `).join('');
        
        html = `
            <div class="mt-8">
                <h2 class="text-3xl font-display font-bold text-slate-900 mb-6 border-b pb-2">–í–∞—à–∏ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h2>
                <div class="space-y-4">
                    ${html}
                </div>
                <div class="mt-8 text-center">
                    <button onclick="saveRecommendations()" class="bg-sunset-orange text-white py-3 px-6 rounded-lg font-medium hover:bg-sunset-orange/90 transition-colors shadow-md">
                        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É
                    </button>
                </div>
            </div>
        `;
        
        resultsContainer.innerHTML = html;
        
        // Animation to draw attention to the new results
        anime({
            targets: resultsContainer.querySelector('.mt-8'),
            translateY: [50, 0],
            opacity: [0, 1],
            duration: 800,
            easing: 'easeOutQuad'
        });
    }

    // Show or hide error messages
    showError(message) {
        const errorContainer = document.getElementById('error-message-container');
        if (!errorContainer) return;

        if (message) {
            errorContainer.innerHTML = `
                <div class="p-4 bg-red-100 border-l-4 border-red-500 rounded-lg flex items-center space-x-3 mb-6 animate-pulse">
                    <div>
                        <svg class="w-6 h-6 text-red-700" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                    </div>
                    <p class="text-red-800 font-semibold">${message}</p>
                </div>
            `;
            errorContainer.classList.remove('hidden');
        } else {
            errorContainer.classList.add('hidden');
            errorContainer.innerHTML = '';
        }
    }

    // Initialize animations
    initAnimations() {
        // Animate form elements on scroll
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.opacity = '1';
                    entry.target.style.transform = 'translateY(0)';
                }
            });
        }, observerOptions);

        // Observe form sections
        document.querySelectorAll('#calculator-form > div').forEach(el => {
            el.style.opacity = '0';
            el.style.transform = 'translateY(20px)';
            el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
            observer.observe(el);
        });
    }
}

// Utility functions
function saveRecommendations() {
    // This would typically save to localStorage or send to server
    alert('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∏–º –ø–æ–∑–∂–µ, –µ—Å–ª–∏, –∫–æ–Ω–µ—á–Ω–æ, –Ω–µ –∑–∞–±—É–¥–µ—Ç–µ, –≥–¥–µ –∏—Ö —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ üòâ.');
}

// Initialize page when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.calculatorPage = new CalculatorPage();
});
