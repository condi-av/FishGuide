// Fish guide page functionality
class FishGuidePage {
    constructor() {
        // [–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å getFishData() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ñ–∞–π–ª–∞]
        this.fishData = this.getFishData(); 
        this.filteredFish = [...this.fishData];
        this.currentCategory = 'all';
        this.currentSort = 'name';
        this.searchQuery = '';
        this.init();
    }

    init() {
        this.initMobileMenu();
        this.initSearch();
        this.initFilters();
        this.initSort();
        this.renderFishGrid();
        this.updateResultsCount();
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –≤–∏–¥–æ–≤
        console.log(`FishGuide –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–∞–π–¥–µ–Ω–æ ${this.fishData.length} –≤–∏–¥–æ–≤ —Ä—ã–±.`); 
    }

    // [–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –≠–ö–°–ü–ï–†–¢–ê] - –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    getFishData() { 
        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è fishGuideData –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ src/fish-data.js –ü–ï–†–ï–î —ç—Ç–∏–º —Å–∫—Ä–∏–ø—Ç–æ–º!
        if (typeof fishGuideData !== 'undefined') {
            return fishGuideData;
        }
        console.error('–û—à–∏–±–∫–∞: –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è fishGuideData –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ src/fish-data.js –ü–ï–†–ï–î fish-guide.js!');
        return [];
    }

    // Mobile menu functionality (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    initMobileMenu() {
        const mobileMenuBtn = document.getElementById('mobile-menu-btn');
        const mobileMenu = document.getElementById('mobile-menu');

        if (mobileMenuBtn && mobileMenu) {
            mobileMenuBtn.addEventListener('click', () => {
                mobileMenu.classList.toggle('hidden');
            });
        }
    }

    // Initialize search functionality
    initSearch() {
        const searchInput = document.getElementById('search-input');
        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                this.searchQuery = e.target.value.toLowerCase();
                this.applyFilters();
            });
        }
    }

    // Initialize category filters
    initFilters() {
        const filterButtons = document.querySelectorAll('.category-filter');
        filterButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                const category = e.currentTarget.dataset.category;
                this.currentCategory = category;
                
                // Update active state
                filterButtons.forEach(btn => btn.classList.remove('bg-lake-blue', 'text-white'));
                e.currentTarget.classList.add('bg-lake-blue', 'text-white');

                this.applyFilters();
            });
        });
    }

    // Initialize sort functionality
    initSort() {
        const sortSelect = document.getElementById('sort-select');
        if (sortSelect) {
            sortSelect.addEventListener('change', (e) => {
                this.currentSort = e.target.value;
                this.applyFilters();
            });
        }
    }
    
    // Apply all filters and sort
    applyFilters() {
        let fish = this.fishData;

        // 1. –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (this.currentCategory !== 'all') {
            fish = fish.filter(f => f.category === this.currentCategory);
        }

        // 2. –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—é
        if (this.searchQuery) {
            fish = fish.filter(f => 
                f.name.toLowerCase().includes(this.searchQuery) || 
                f.description.toLowerCase().includes(this.searchQuery)
            );
        }

        // 3. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        fish.sort((a, b) => {
            if (this.currentSort === 'name') {
                return a.name.localeCompare(b.name, 'ru', { sensitivity: 'base' });
            }
            if (this.currentSort === 'category') {
                return a.category.localeCompare(b.category);
            }
            return 0; // default
        });

        this.filteredFish = fish;
        this.renderFishGrid();
        this.updateResultsCount();
    }

    // Render the fish grid
    renderFishGrid() {
        const gridContainer = document.getElementById('fish-grid');
        if (!gridContainer) return;

        gridContainer.innerHTML = ''; 

        if (this.filteredFish.length === 0) {
            gridContainer.innerHTML = this.renderEmptyState();
            return;
        }

        this.filteredFish.forEach(fish => {
            gridContainer.innerHTML += this.renderFishCard(fish);
        });
    }
    
    // [–î–û–ë–ê–í–õ–ï–ù–û] - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä—ã–±—ã
    renderFishCard(fish) {
        const categoryMap = {
            'predator': '–•–∏—â–Ω–∏–∫',
            'peaceful': '–ú–∏—Ä–Ω–∞—è —Ä—ã–±–∞'
        };

        const categoryText = categoryMap[fish.category] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        const colorClass = fish.category === 'predator' ? 'bg-sunset-orange/10 text-sunset-orange' : 'bg-accent-green/10 text-accent-green';

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ onclick –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        return `
            <div class="bg-white rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-[1.02] cursor-pointer" onclick="showFishDetails('${fish.id}')">
                <div class="relative overflow-hidden h-48 rounded-t-xl bg-gray-100">
                    <div class="flex items-center justify-center h-full text-6xl text-slate-400">
                        ${fish.icon || 'üêü'}
                    </div>
                    <span class="absolute top-3 right-3 ${colorClass} text-xs font-semibold px-3 py-1 rounded-full">${categoryText}</span>
                </div>
                <div class="p-5">
                    <h2 class="text-2xl font-display font-bold text-slate-900 mb-2">${fish.name}</h2>
                    <p class="text-sm text-slate-600 line-clamp-2">${fish.description.split('.')[0]}.</p>
                    <div class="mt-4 flex justify-between items-center">
                        <span class="text-sm font-semibold text-lake-blue">${fish.season.join(', ')}</span>
                        <button class="text-sm font-medium text-slate-500 hover:text-lake-blue transition-colors">–ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚Üí</button>
                    </div>
                </div>
            </div>
        `;
    }

    // Update results counter
    updateResultsCount() {
        const countElement = document.getElementById('results-count');
        if (countElement) {
            countElement.textContent = this.filteredFish.length;
        }
    }
    
    // Render empty state (–∫–æ–≥–¥–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
    renderEmptyState() {
        return `
            <div class="col-span-full text-center py-12 bg-gray-100 rounded-xl">
                <span class="text-6xl mb-4 block">üòî</span>
                <h3 class="text-2xl font-display font-bold text-slate-900 mb-2">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</h3>
                <p class="text-slate-600">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ–π —Ä—ã–±—ã –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç –≤ –Ω–∞—à–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ. (–ü–æ–∫–∞ —á—Ç–æ!)</p>
            </div>
        `;
    }

    // Show details in modal (–Ω—É–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π HTML-–º–æ–¥–∞–ª –≤ fish-guide.html!)
    showFishDetails(fishId) {
        const fish = this.fishData.find(f => f.id === fishId);
        if (!fish) return;

        const modal = document.getElementById('fish-modal');
        const modalContent = document.getElementById('fish-modal-content');
        if (!modal || !modalContent) return;
        
        // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        modalContent.innerHTML = `
            <div class="flex justify-between items-start mb-6">
                <h2 class="text-3xl font-display font-bold text-slate-900">${fish.name} <span class="text-4xl ml-2">${fish.icon}</span></h2>
                <button onclick="closeModal()" class="text-slate-400 hover:text-slate-700 transition-colors p-1">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                </button>
            </div>
            
            <div class="relative mb-6 rounded-xl overflow-hidden bg-gray-200 h-64 flex items-center justify-center text-8xl text-slate-500">
                ${fish.icon}
            </div>
            
            <div class="grid grid-cols-2 gap-4 mb-6 text-sm">
                <div>
                    <h3 class="font-semibold text-slate-800">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</h3>
                    <p class="text-slate-600">${fish.category === 'predator' ? '–•–∏—â–Ω–∏–∫' : '–ú–∏—Ä–Ω–∞—è —Ä—ã–±–∞'}</p>
                </div>
                <div>
                    <h3 class="font-semibold text-slate-800">–°–µ–∑–æ–Ω</h3>
                    <p class="text-slate-600">${fish.season.join(', ')}</p>
                </div>
                <div>
                    <h3 class="font-semibold text-slate-800">–°—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è</h3>
                    <p class="text-slate-600">${fish.habitat}</p>
                </div>
            </div>
            
            <div class="mb-6">
                <h3 class="font-semibold text-slate-800 mb-3">–ù–∞ —á—Ç–æ –ª–æ–≤–∏—Ç—å (–ü—Ä–∏–º–∞–Ω–∫–∏)</h3>
                <div class="flex flex-wrap gap-2">
                    ${fish.bait.map(b => `<span class="bg-lake-blue/10 text-lake-blue px-3 py-1 rounded-full text-sm font-medium">${b}</span>`).join('')}
                </div>
            </div>

            <div class="mb-6">
                <h3 class="font-semibold text-slate-800 mb-3">–û–ø–∏—Å–∞–Ω–∏–µ</h3>
                <p class="text-slate-600 leading-relaxed">${fish.description}</p>
            </div>
            
            <div class="mb-6">
                <h3 class="font-semibold text-slate-800 mb-3">–°–æ–≤–µ—Ç—ã –ø–æ –ª–æ–≤–ª–µ</h3>
                <div class="bg-accent-green/10 text-accent-green rounded-xl p-4">
                    <p class="text-slate-700">${fish.tips}</p>
                </div>
            </div>
            
            <div class="bg-sunset-orange/10 text-sunset-orange rounded-xl p-4">
                <h3 class="font-semibold text-slate-800 mb-2">–ü—Ä–∞–≤–∏–ª–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è</h3>
                <p class="text-slate-700 text-sm">${fish.regulations}</p>
            </div>
        `;

        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç, —á—Ç–æ —É –º–æ–¥–∞–ª–∞ –µ—Å—Ç—å CSS-—Å—Ç–∏–ª–∏ –¥–ª—è .show)
        modal.classList.add('show');
    }
}

// Utility functions (—Ñ—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ HTML)
function showFishDetails(fishId) {
    if (window.fishGuidePage) {
        window.fishGuidePage.showFishDetails(fishId);
    }
}

function closeModal() {
    const modal = document.getElementById('fish-modal');
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    if (modal) {
        modal.classList.remove('show');
    }
}

// Close modal when clicking outside
window.addEventListener('click', (e) => {
    const modal = document.getElementById('fish-modal');
    if (modal && e.target === modal) {
        closeModal();
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    window.fishGuidePage = new FishGuidePage();
});
