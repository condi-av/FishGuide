// FishGuide - Main JavaScript File

// Global variables
let lakesData = [];
let fishData = [];
let userLocation = null;
let dataLoaded = false;

// Initialize application
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

async function initializeApp() {
    try {
        console.log('Initializing FishGuide app...');
        
        // Load data first
        await loadData();
        
        // Initialize geolocation
        initializeGeolocation();
        
        // Initialize components based on current page
        const currentPage = getCurrentPage();
        console.log('Current page:', currentPage);
        
        switch(currentPage) {
            case 'index':
                initializeHomePage();
                break;
            case 'lakes':
                // Lakes page will initialize itself
                break;
            case 'lake-detail':
                // Lake detail page will initialize itself  
                break;
            case 'tackle-calculator':
                // Calculator will initialize itself
                break;
            case 'fish-guide':
                // Fish guide will initialize itself
                break;
        }
        
        console.log('App initialized successfully');
        
    } catch (error) {
        console.error('Error initializing app:', error);
    }
}

// Load data from JSON
async function loadData() {
    try {
        console.log('Loading data from data.json...');
        const response = await fetch('data.json');
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        lakesData = data.lakes || [];
        fishData = data.fish || [];
        
        console.log(`Loaded ${lakesData.length} lakes and ${fishData.length} fish`);
        
        // Update global data object
        window.FishGuide = window.FishGuide || {};
        window.FishGuide.lakesData = lakesData;
        window.FishGuide.fishData = fishData;
        window.FishGuide.userLocation = userLocation;
        
        dataLoaded = true;
        
    } catch (error) {
        console.error('Error loading data:', error);
        // Use fallback data
        lakesData = generateAdditionalLakes([]);
        fishData = generateAdditionalFish([]);
        
        window.FishGuide = window.FishGuide || {};
        window.FishGuide.lakesData = lakesData;
        window.FishGuide.fishData = fishData;
        window.FishGuide.userLocation = userLocation;
        
        dataLoaded = true;
    }
}

// Generate additional lakes data (fallback)
function generateAdditionalLakes(existingLakes) {
    console.log('Generating fallback lakes data...');
    const additionalLakes = [
        {
            "id": 1,
            "name": "–û–∑–µ—Ä–æ –°–µ–ª–∏–≥–µ—Ä",
            "region": "–¢–≤–µ—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
            "rating": 4.8,
            "description": "–û–¥–Ω–æ –∏–∑ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –∏ –∂–∏–≤–æ–ø–∏—Å–Ω–µ–π—à–∏—Ö –æ–∑–µ—Ä –¢–≤–µ—Ä—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏.",
            "fish_species": ["–©—É–∫–∞", "–û–∫—É–Ω—å", "–õ–µ—â", "–°—É–¥–∞–∫", "–Ø–∑—å", "–ü–ª–æ—Ç–≤–∞"],
            "best_season": ["–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å"],
            "coordinates": { "lat": 57.2, "lon": 33.1 },
            "infrastructure": ["–ë–∞–∑–∞ –æ—Ç–¥—ã—Ö–∞", "–ü–∞—Ä–∫–æ–≤–∫–∞", "–ü—Ä–æ–∫–∞—Ç –ª–æ–¥–æ–∫", "–ö–∞—Ñ–µ"],
            "popularity": 1
        },
        {
            "id": 2,
            "name": "–û–∑–µ—Ä–æ –ë–∞–π–∫–∞–ª", 
            "region": "–ò—Ä–∫—É—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
            "rating": 4.9,
            "description": "–í–µ–ª–∏—á–∞–π—à–µ–µ –æ–∑–µ—Ä–æ –º–∏—Ä–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º–æ–π.",
            "fish_species": ["–û–º—É–ª—å", "–•–∞—Ä–∏—É—Å", "–õ–µ–Ω–æ–∫", "–¢–∞–π–º–µ–Ω—å", "–©—É–∫–∞", "–û–∫—É–Ω—å"],
            "best_season": ["–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å"],
            "coordinates": { "lat": 53.5, "lon": 108.2 },
            "infrastructure": ["–ì–æ—Å—Ç–∏–Ω–∏—Ü—ã", "–ë–∞–∑—ã –æ—Ç–¥—ã—Ö–∞", "–≠–∫—Å–∫—É—Ä—Å–∏–∏", "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã"],
            "popularity": 2
        }
    ];
    
    return [...existingLakes, ...additionalLakes];
}

// Generate additional fish data (fallback)
function generateAdditionalFish(existingFish) {
    console.log('Generating fallback fish data...');
    const additionalFish = [
        {
            "id": 1,
            "name": "–©—É–∫–∞",
            "type": "—Ö–∏—â–Ω–∞—è",
            "description": "–ö—Ä—É–ø–Ω–∞—è —Ö–∏—â–Ω–∞—è —Ä—ã–±–∞ —Å –¥–ª–∏–Ω–Ω—ã–º —Ç–µ–ª–æ–º –∏ –æ—Å—Ç—Ä–æ–π –ø–∞—Å—Ç—å—é.",
            "habitat": "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç —Å—Ç–æ—è—á–∏–µ –≤–æ–¥–æ–µ–º—ã —Å –∑–∞—Ä–æ—Å–ª—è–º–∏ —Ç—Ä–æ—Å—Ç–Ω–∏–∫–∞.",
            "tackle_recommendations": "–°–ø–∏–Ω–Ω–∏–Ω–≥ —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–ª–∞—Å—Å–∞, –ø—Ä–æ—á–Ω–∞—è –ø–ª–µ—Ç–µ–Ω–∞—è –ª–µ—Å–∫–∞ 0.15-0.25–º–º",
            "best_biting_time": "–†–∞–Ω–Ω–µ–µ —É—Ç—Ä–æ –∏ –≤–µ—á–µ—Ä –≤ —Ç–µ–ø–ª—ã–µ –º–µ—Å—è—Ü—ã",
            "seasons": ["–í–µ—Å–Ω–∞", "–û—Å–µ–Ω—å"]
        },
        {
            "id": 2, 
            "name": "–û–∫—É–Ω—å",
            "type": "—Ö–∏—â–Ω–∞—è",
            "description": "–ü–æ–ª–æ—Å–∞—Ç–∞—è —Ö–∏—â–Ω–∞—è —Ä—ã–±–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.",
            "habitat": "–ñ–∏–≤–µ—Ç –∫–∞–∫ –≤ —Å—Ç–æ—è—á–∏—Ö, —Ç–∞–∫ –∏ –≤ –ø—Ä–æ—Ç–æ—á–Ω—ã—Ö –≤–æ–¥–æ–µ–º–∞—Ö.",
            "tackle_recommendations": "–õ–µ–≥–∫–∏–π —Å–ø–∏–Ω–Ω–∏–Ω–≥ –∏–ª–∏ –ø–æ–ø–ª–∞–≤–æ—á–Ω–∞—è —É–¥–æ—á–∫–∞, –ª–µ—Å–∫–∞ 0.12-0.18–º–º",
            "best_biting_time": "–ö—Ä—É–≥–ª—ã–π –≥–æ–¥, –æ—Å–æ–±–µ–Ω–Ω–æ –∞–∫—Ç–∏–≤–µ–Ω –∑–∏–º–æ–π",
            "seasons": ["–ó–∏–º–∞", "–í–µ—Å–Ω–∞", "–õ–µ—Ç–æ", "–û—Å–µ–Ω—å"]
        }
    ];
    
    return [...existingFish, ...additionalFish];
}

// Get current page
function getCurrentPage() {
    const path = window.location.pathname;
    const page = path.split('/').pop() || 'index.html';
    
    if (page === 'index.html' || page === '') return 'index';
    if (page === 'lakes.html') return 'lakes';
    if (page === 'lake-detail.html') return 'lake-detail';
    if (page === 'tackle-calculator.html') return 'tackle-calculator';
    if (page === 'fish-guide.html') return 'fish-guide';
    return 'index';
}

// Initialize geolocation
function initializeGeolocation() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            function(position) {
                userLocation = {
                    lat: position.coords.latitude,
                    lon: position.coords.longitude
                };
                console.log('User location:', userLocation);
                
                // Update global object
                if (window.FishGuide) {
                    window.FishGuide.userLocation = userLocation;
                }
            },
            function(error) {
                console.log('Geolocation error:', error);
                // Set default location (Moscow)
                userLocation = { lat: 55.7558, lon: 37.6173 };
                if (window.FishGuide) {
                    window.FishGuide.userLocation = userLocation;
                }
            }
        );
    } else {
        userLocation = { lat: 55.7558, lon: 37.6173 };
        if (window.FishGuide) {
            window.FishGuide.userLocation = userLocation;
        }
    }
}

// Initialize home page
function initializeHomePage() {
    console.log('Initializing home page...');
    
    // Wait for data to be loaded
    if (lakesData.length > 0) {
        initializePopularLakesSlider();
    } else {
        // Wait for data
        const checkInterval = setInterval(() => {
            if (lakesData.length > 0) {
                clearInterval(checkInterval);
                initializePopularLakesSlider();
            }
        }, 100);
    }
}

// Initialize popular lakes slider
function initializePopularLakesSlider() {
    const popularLakes = lakesData
        .sort((a, b) => b.popularity - a.popularity)
        .slice(0, 6);
    
    const lakesList = document.getElementById('popular-lakes-list');
    if (lakesList) {
        lakesList.innerHTML = popularLakes.map(lake => createLakeCard(lake)).join('');
        
        // Initialize Splide slider if available
        if (typeof Splide !== 'undefined') {
            try {
                new Splide('#popular-lakes-slider', {
                    type: 'loop',
                    perPage: 3,
                    perMove: 1,
                    gap: '2rem',
                    autoplay: true,
                    interval: 4000,
                    breakpoints: {
                        768: { perPage: 1 },
                        1024: { perPage: 2 }
                    }
                }).mount();
            } catch (error) {
                console.error('Splide initialization error:', error);
            }
        }
    }
}

// Create lake card HTML
function createLakeCard(lake) {
    return `
        <li class="splide__slide">
            <div class="bg-white rounded-xl shadow-lg overflow-hidden card-hover">
                <div class="h-48 bg-gradient-to-br from-blue-400 to-blue-600 flex items-center justify-center">
                    <div class="text-6xl">üèûÔ∏è</div>
                </div>
                <div class="p-6">
                    <div class="flex items-center justify-between mb-2">
                        <span class="text-sm text-slate-600">${lake.region}</span>
                        <div class="flex items-center">
                            <span class="text-yellow-500">‚≠ê</span>
                            <span class="ml-1 text-sm font-medium">${lake.rating}</span>
                        </div>
                    </div>
                    <h3 class="text-xl font-semibold mb-2">${lake.name}</h3>
                    <p class="text-slate-600 text-sm mb-4 line-clamp-2">${lake.description}</p>
                    <div class="flex flex-wrap gap-1 mb-4">
                        ${lake.fish_species.slice(0, 3).map(fish => 
                            `<span class="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded">${fish}</span>`
                        ).join('')}
                        ${lake.fish_species.length > 3 ? `<span class="text-xs text-slate-500">+${lake.fish_species.length - 3}</span>` : ''}
                    </div>
                    <div class="text-sm text-slate-600 mb-4">
                        –õ—É—á—à–∏–π —Å–µ–∑–æ–Ω: ${lake.best_season.slice(0, 3).join(', ')}
                    </div>
                    <a href="lake-detail.html?id=${lake.id}" class="inline-flex items-center text-blue-600 hover:text-blue-800 font-medium">
                        –ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚Üí
                    </a>
                </div>
            </div>
        </li>
    `;
}

// Utility functions
function calculateDistance(coord1, coord2) {
    if (!coord1 || !coord2) return null;
    
    const R = 6371;
    const dLat = (coord2.lat - coord1.lat) * Math.PI / 180;
    const dLon = (coord2.lon - coord1.lon) * Math.PI / 180;
    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
              Math.cos(coord1.lat * Math.PI / 180) * Math.cos(coord2.lat * Math.PI / 180) *
              Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c;
}

function formatDistance(distance) {
    if (distance === null || distance === undefined) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    if (distance < 1) {
        return `${Math.round(distance * 1000)}–º`;
    }
    return `${distance.toFixed(1)}–∫–º`;
}

// Toggle mobile menu
function toggleMobileMenu() {
    const menu = document.getElementById('mobile-menu');
    if (menu) {
        menu.classList.toggle('hidden');
    }
}

// Export functions and data for use in other pages
window.FishGuide = window.FishGuide || {};
window.FishGuide.createLakeCard = createLakeCard;
window.FishGuide.formatDistance = formatDistance;
window.FishGuide.calculateDistance = calculateDistance;
window.FishGuide.toggleMobileMenu = toggleMobileMenu;

// Check if data is ready every 100ms and initialize pages
let dataCheckInterval = setInterval(() => {
    if (dataLoaded && window.FishGuide.lakesData && window.FishGuide.lakesData.length > 0) {
        clearInterval(dataCheckInterval);
        
        // Initialize specific page functions if they exist
        const currentPage = getCurrentPage();
        if (currentPage === 'lakes' && typeof initializeLakesPage === 'function') {
            initializeLakesPage();
        }
        if (currentPage === 'fish-guide' && typeof initializeFishGuide === 'function') {
            initializeFishGuide();
        }
        if (currentPage === 'tackle-calculator' && typeof initializeTackleCalculator === 'function') {
            initializeTackleCalculator();
        }
        if (currentPage === 'lake-detail' && typeof initializeLakeDetailPage === 'function') {
            initializeLakeDetailPage();
        }
    }
}, 100);
